expname: lego_shape

device_ids: [0]     # single gpu           ; run on specified GPU
# device_ids: [1, 0]  # DP                   ; run on specified GPU
# device_ids: -1        # single GPU / DP / DDP; run on all available GPUs;

data:
  type: nerf
  batch_size: 1       # one batch, one image
  data_dir: data/nerf_synthetic/lego
  rgb_file: rgba.png
  downscale: 1        # downscale image for training
  scale_radius: 1.1
  pin_memory: True

  N_rays: 1024         # N_rays for training
  val_rayschunk: 1024 # N_rays for validation
  val_downscale: 2    # downscale image for validation

model:
  framework: NeuS
  obj_bounding_radius: 1.0

  variance_init: 0.05

  # upsampling related
  upsample_algo:    official_solution   # [direct_use, direct_more, official_solution]
  N_nograd_samples: 2048  # config for upsampling using 'direct_more'
  N_upsample_iters: 4     # config for upsampling using 'official_solution'

  surface:
    D: 8
    W: 256
    skips: [4]
    radius_init: 0.5
    embed_multires: 8

  radiance:
    D: 4
    W: 256
    skips: []
    embed_multires: -1
    embed_multires_view: 4  # as in the NeuS official implementaion

training:
  lr: 5.0e-4
  speed_factor: 10.0    # NOTE: unexpectedly, this is very important. setting to 1.0 will cause some of the DTU instances can not converge correctly.
  debug: False
  # neus
  with_mask: True
  w_eikonal: 0.1
  w_mask: 1.0

  log_root_dir: "logs"

  # lr decay
  scheduler:
    type: warmupcosine
    warmup_steps: 5000 # unit: itertation steps

  # num_epochs: 50000
  num_iters: 150000 # 300k for N_rays=512

  ckpt_file: null # will be read by python as None
  ckpt_ignore_keys: []     # only change if you want to drop certain keys in the saved checkpionts.
  ckpt_only_use_keys: null # only change if you want to only use certain keys in the saved checkpionts.

  monitoring: tensorboard

  i_save: 900       # unit: seconds
  i_backup: 50000   # unit: itertation steps

  i_val: 500
  i_val_mesh: 10000